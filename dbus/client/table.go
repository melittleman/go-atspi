// Code generated by dbus-codegen-go DO NOT EDIT.
package client

import (
	"context"
	"errors"
	"fmt"
	"github.com/godbus/dbus/v5"
)

// Interface name constants.
const (
	InterfaceTable = "org.a11y.atspi.Table"
)

// NewTable creates and allocates org.a11y.atspi.Table.
func NewTable(object dbus.BusObject) *Table {
	return &Table{object}
}

// Table implements org.a11y.atspi.Table D-Bus interface.
type Table struct {
	object dbus.BusObject
}

// GetAccessibleAt calls org.a11y.atspi.Table.GetAccessibleAt method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiObjectReference
func (o *Table) GetAccessibleAt(ctx context.Context, row int32, column int32) (out0 struct {
	V0 string
	V1 dbus.ObjectPath
}, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetAccessibleAt", 0, row, column).Store(&out0)
	return
}

// GetIndexAt calls org.a11y.atspi.Table.GetIndexAt method.
func (o *Table) GetIndexAt(ctx context.Context, row int32, column int32) (out0 int32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetIndexAt", 0, row, column).Store(&out0)
	return
}

// GetRowAtIndex calls org.a11y.atspi.Table.GetRowAtIndex method.
func (o *Table) GetRowAtIndex(ctx context.Context, index int32) (out0 int32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetRowAtIndex", 0, index).Store(&out0)
	return
}

// GetColumnAtIndex calls org.a11y.atspi.Table.GetColumnAtIndex method.
func (o *Table) GetColumnAtIndex(ctx context.Context, index int32) (out0 int32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetColumnAtIndex", 0, index).Store(&out0)
	return
}

// GetRowDescription calls org.a11y.atspi.Table.GetRowDescription method.
func (o *Table) GetRowDescription(ctx context.Context, row int32) (out0 string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetRowDescription", 0, row).Store(&out0)
	return
}

// GetColumnDescription calls org.a11y.atspi.Table.GetColumnDescription method.
func (o *Table) GetColumnDescription(ctx context.Context, column int32) (out0 string, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetColumnDescription", 0, column).Store(&out0)
	return
}

// GetRowExtentAt calls org.a11y.atspi.Table.GetRowExtentAt method.
func (o *Table) GetRowExtentAt(ctx context.Context, row int32, column int32) (out0 int32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetRowExtentAt", 0, row, column).Store(&out0)
	return
}

// GetColumnExtentAt calls org.a11y.atspi.Table.GetColumnExtentAt method.
func (o *Table) GetColumnExtentAt(ctx context.Context, row int32, column int32) (out0 int32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetColumnExtentAt", 0, row, column).Store(&out0)
	return
}

// GetRowHeader calls org.a11y.atspi.Table.GetRowHeader method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiObjectReference
func (o *Table) GetRowHeader(ctx context.Context, row int32) (out0 struct {
	V0 string
	V1 dbus.ObjectPath
}, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetRowHeader", 0, row).Store(&out0)
	return
}

// GetColumnHeader calls org.a11y.atspi.Table.GetColumnHeader method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiObjectReference
func (o *Table) GetColumnHeader(ctx context.Context, column int32) (out0 struct {
	V0 string
	V1 dbus.ObjectPath
}, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetColumnHeader", 0, column).Store(&out0)
	return
}

// GetSelectedRows calls org.a11y.atspi.Table.GetSelectedRows method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiIntList
func (o *Table) GetSelectedRows(ctx context.Context) (out0 []int32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetSelectedRows", 0).Store(&out0)
	return
}

// GetSelectedColumns calls org.a11y.atspi.Table.GetSelectedColumns method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiIntList
func (o *Table) GetSelectedColumns(ctx context.Context) (out0 []int32, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetSelectedColumns", 0).Store(&out0)
	return
}

// IsRowSelected calls org.a11y.atspi.Table.IsRowSelected method.
func (o *Table) IsRowSelected(ctx context.Context, row int32) (out0 bool, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".IsRowSelected", 0, row).Store(&out0)
	return
}

// IsColumnSelected calls org.a11y.atspi.Table.IsColumnSelected method.
func (o *Table) IsColumnSelected(ctx context.Context, column int32) (out0 bool, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".IsColumnSelected", 0, column).Store(&out0)
	return
}

// IsSelected calls org.a11y.atspi.Table.IsSelected method.
func (o *Table) IsSelected(ctx context.Context, row int32, column int32) (out0 bool, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".IsSelected", 0, row, column).Store(&out0)
	return
}

// AddRowSelection calls org.a11y.atspi.Table.AddRowSelection method.
func (o *Table) AddRowSelection(ctx context.Context, row int32) (out0 bool, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".AddRowSelection", 0, row).Store(&out0)
	return
}

// AddColumnSelection calls org.a11y.atspi.Table.AddColumnSelection method.
func (o *Table) AddColumnSelection(ctx context.Context, column int32) (out0 bool, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".AddColumnSelection", 0, column).Store(&out0)
	return
}

// RemoveRowSelection calls org.a11y.atspi.Table.RemoveRowSelection method.
func (o *Table) RemoveRowSelection(ctx context.Context, row int32) (out0 bool, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".RemoveRowSelection", 0, row).Store(&out0)
	return
}

// RemoveColumnSelection calls org.a11y.atspi.Table.RemoveColumnSelection method.
func (o *Table) RemoveColumnSelection(ctx context.Context, column int32) (out0 bool, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".RemoveColumnSelection", 0, column).Store(&out0)
	return
}

// GetRowColumnExtentsAtIndex calls org.a11y.atspi.Table.GetRowColumnExtentsAtIndex method.
func (o *Table) GetRowColumnExtentsAtIndex(ctx context.Context, index int32) (out0 bool, row int32, col int32, rowExtents int32, colExtents int32, isSelected bool, err error) {
	err = o.object.CallWithContext(ctx, InterfaceTable+".GetRowColumnExtentsAtIndex", 0, index).Store(&out0, &row, &col, &rowExtents, &colExtents, &isSelected)
	return
}

// GetNRows gets org.a11y.atspi.Table.NRows property.
func (o *Table) GetNRows(ctx context.Context) (nRows int32, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceTable, "NRows").Store(&nRows)
	return
}

// GetNColumns gets org.a11y.atspi.Table.NColumns property.
func (o *Table) GetNColumns(ctx context.Context) (nColumns int32, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceTable, "NColumns").Store(&nColumns)
	return
}

// GetCaption gets org.a11y.atspi.Table.Caption property.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName = QSpiObjectReference
func (o *Table) GetCaption(ctx context.Context) (caption struct {
	V0 string
	V1 dbus.ObjectPath
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceTable, "Caption").Store(&caption)
	return
}

// GetSummary gets org.a11y.atspi.Table.Summary property.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName = QSpiObjectReference
func (o *Table) GetSummary(ctx context.Context) (summary struct {
	V0 string
	V1 dbus.ObjectPath
}, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceTable, "Summary").Store(&summary)
	return
}

// GetNSelectedRows gets org.a11y.atspi.Table.NSelectedRows property.
func (o *Table) GetNSelectedRows(ctx context.Context) (nSelectedRows int32, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceTable, "NSelectedRows").Store(&nSelectedRows)
	return
}

// GetNSelectedColumns gets org.a11y.atspi.Table.NSelectedColumns property.
func (o *Table) GetNSelectedColumns(ctx context.Context) (nSelectedColumns int32, err error) {
	err = o.object.CallWithContext(ctx, "org.freedesktop.DBus.Properties.Get", 0, InterfaceTable, "NSelectedColumns").Store(&nSelectedColumns)
	return
}
