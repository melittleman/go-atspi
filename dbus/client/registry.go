// Code generated by dbus-codegen-go DO NOT EDIT.
package client

import (
	"context"
	"errors"
	"fmt"
	"github.com/godbus/dbus/v5"
)

// Signal is a common interface for all signals.
type Signal interface {
	Name() string
	Interface() string
	Sender() string

	path() dbus.ObjectPath
	values() []interface{}
}

// ErrUnknownSignal is returned by LookupSignal when a signal cannot be resolved.
var ErrUnknownSignal = errors.New("unknown signal")

// LookupSignal converts the given raw D-Bus signal with variable body
// into one with typed structured body or returns ErrUnknownSignal error.
func LookupSignal(signal *dbus.Signal) (Signal, error) {
	switch signal.Name {
	case InterfaceRegistry + "." + "EventListenerRegistered":
		v0, ok := signal.Body[0].(string)
		if !ok {
			return nil, fmt.Errorf("prop .Bus is %T, not string", signal.Body[0])
		}
		v1, ok := signal.Body[1].(string)
		if !ok {
			return nil, fmt.Errorf("prop .Path is %T, not string", signal.Body[1])
		}
		return &RegistryEventListenerRegisteredSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &RegistryEventListenerRegisteredSignalBody{
				Bus:  v0,
				Path: v1,
			},
		}, nil
	case InterfaceRegistry + "." + "EventListenerDeregistered":
		v0, ok := signal.Body[0].(string)
		if !ok {
			return nil, fmt.Errorf("prop .Bus is %T, not string", signal.Body[0])
		}
		v1, ok := signal.Body[1].(string)
		if !ok {
			return nil, fmt.Errorf("prop .Path is %T, not string", signal.Body[1])
		}
		return &RegistryEventListenerDeregisteredSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &RegistryEventListenerDeregisteredSignalBody{
				Bus:  v0,
				Path: v1,
			},
		}, nil
	default:
		return nil, ErrUnknownSignal
	}
}

// AddMatchSignal registers a match rule for the given signal,
// opts are appended to the automatically generated signal's rules.
func AddMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.AddMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// RemoveMatchSignal unregisters the previously registered subscription.
func RemoveMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.RemoveMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// Interface name constants.
const (
	InterfaceRegistry = "org.a11y.atspi.Registry"
)

// NewRegistry creates and allocates org.a11y.atspi.Registry.
func NewRegistry(object dbus.BusObject) *Registry {
	return &Registry{object}
}

// Registry implements org.a11y.atspi.Registry D-Bus interface.
type Registry struct {
	object dbus.BusObject
}

// RegisterEvent calls org.a11y.atspi.Registry.RegisterEvent method.
func (o *Registry) RegisterEvent(ctx context.Context, event string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceRegistry+".RegisterEvent", 0, event).Store()
	return
}

// DeregisterEvent calls org.a11y.atspi.Registry.DeregisterEvent method.
func (o *Registry) DeregisterEvent(ctx context.Context, event string) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceRegistry+".DeregisterEvent", 0, event).Store()
	return
}

// GetRegisteredEvents calls org.a11y.atspi.Registry.GetRegisteredEvents method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiEventListenerArray
func (o *Registry) GetRegisteredEvents(ctx context.Context) (events []struct {
	V0 string
	V1 string
}, err error) {
	err = o.object.CallWithContext(ctx, InterfaceRegistry+".GetRegisteredEvents", 0).Store(&events)
	return
}

// RegistryEventListenerRegisteredSignal represents org.a11y.atspi.Registry.EventListenerRegistered signal.
type RegistryEventListenerRegisteredSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *RegistryEventListenerRegisteredSignalBody
}

// Name returns the signal's name.
func (s *RegistryEventListenerRegisteredSignal) Name() string {
	return "EventListenerRegistered"
}

// Interface returns the signal's interface.
func (s *RegistryEventListenerRegisteredSignal) Interface() string {
	return InterfaceRegistry
}

// Sender returns the signal's sender unique name.
func (s *RegistryEventListenerRegisteredSignal) Sender() string {
	return s.sender
}

func (s *RegistryEventListenerRegisteredSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *RegistryEventListenerRegisteredSignal) values() []interface{} {
	return []interface{}{s.Body.Bus, s.Body.Path}
}

// RegistryEventListenerRegisteredSignalBody is body container.
type RegistryEventListenerRegisteredSignalBody struct {
	Bus  string
	Path string
}

// RegistryEventListenerDeregisteredSignal represents org.a11y.atspi.Registry.EventListenerDeregistered signal.
type RegistryEventListenerDeregisteredSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *RegistryEventListenerDeregisteredSignalBody
}

// Name returns the signal's name.
func (s *RegistryEventListenerDeregisteredSignal) Name() string {
	return "EventListenerDeregistered"
}

// Interface returns the signal's interface.
func (s *RegistryEventListenerDeregisteredSignal) Interface() string {
	return InterfaceRegistry
}

// Sender returns the signal's sender unique name.
func (s *RegistryEventListenerDeregisteredSignal) Sender() string {
	return s.sender
}

func (s *RegistryEventListenerDeregisteredSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *RegistryEventListenerDeregisteredSignal) values() []interface{} {
	return []interface{}{s.Body.Bus, s.Body.Path}
}

// RegistryEventListenerDeregisteredSignalBody is body container.
type RegistryEventListenerDeregisteredSignalBody struct {
	Bus  string
	Path string
}
