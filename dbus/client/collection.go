// Code generated by dbus-codegen-go DO NOT EDIT.
package client

import (
	"context"
	"errors"
	"fmt"
	"github.com/godbus/dbus/v5"
)

// Interface name constants.
const (
	InterfaceCollection = "org.a11y.atspi.Collection"
)

// NewCollection creates and allocates org.a11y.atspi.Collection.
func NewCollection(object dbus.BusObject) *Collection {
	return &Collection{object}
}

// Collection implements org.a11y.atspi.Collection D-Bus interface.
type Collection struct {
	object dbus.BusObject
}

// GetMatches calls org.a11y.atspi.Collection.GetMatches method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiMatchRule
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiReferenceSet
func (o *Collection) GetMatches(ctx context.Context, rule struct {
	V0 []int32
	V1 int32
	V2 map[string]string
	V3 int32
	V4 []int32
	V5 int32
	V6 []string
	V7 int32
	V8 bool
}, sortby uint32, count int32, traverse bool) (out0 []struct {
	V0 string
	V1 dbus.ObjectPath
}, err error) {
	err = o.object.CallWithContext(ctx, InterfaceCollection+".GetMatches", 0, rule, sortby, count, traverse).Store(&out0)
	return
}

// GetMatchesTo calls org.a11y.atspi.Collection.GetMatchesTo method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiObjectReference
//   @org.qtproject.QtDBus.QtTypeName.In1 = QSpiMatchRule
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiReferenceSet
func (o *Collection) GetMatchesTo(ctx context.Context, currentObject dbus.ObjectPath, rule struct {
	V0 []int32
	V1 int32
	V2 map[string]string
	V3 int32
	V4 []int32
	V5 int32
	V6 []string
	V7 int32
	V8 bool
}, sortby uint32, tree uint32, limitScope bool, count int32, traverse bool) (out0 []struct {
	V0 string
	V1 dbus.ObjectPath
}, err error) {
	err = o.object.CallWithContext(ctx, InterfaceCollection+".GetMatchesTo", 0, currentObject, rule, sortby, tree, limitScope, count, traverse).Store(&out0)
	return
}

// GetMatchesFrom calls org.a11y.atspi.Collection.GetMatchesFrom method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiObjectReference
//   @org.qtproject.QtDBus.QtTypeName.In1 = QSpiMatchRule
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiReferenceSet
func (o *Collection) GetMatchesFrom(ctx context.Context, currentObject dbus.ObjectPath, rule struct {
	V0 []int32
	V1 int32
	V2 map[string]string
	V3 int32
	V4 []int32
	V5 int32
	V6 []string
	V7 int32
	V8 bool
}, sortby uint32, tree uint32, count int32, traverse bool) (out0 []struct {
	V0 string
	V1 dbus.ObjectPath
}, err error) {
	err = o.object.CallWithContext(ctx, InterfaceCollection+".GetMatchesFrom", 0, currentObject, rule, sortby, tree, count, traverse).Store(&out0)
	return
}

// GetActiveDescendant calls org.a11y.atspi.Collection.GetActiveDescendant method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiReferenceSet
func (o *Collection) GetActiveDescendant(ctx context.Context) (out0 struct {
	V0 string
	V1 dbus.ObjectPath
}, err error) {
	err = o.object.CallWithContext(ctx, InterfaceCollection+".GetActiveDescendant", 0).Store(&out0)
	return
}
