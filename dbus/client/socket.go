// Code generated by dbus-codegen-go DO NOT EDIT.
package client

import (
	"context"
	"errors"
	"fmt"
	"github.com/godbus/dbus/v5"
)

// Signal is a common interface for all signals.
type Signal interface {
	Name() string
	Interface() string
	Sender() string

	path() dbus.ObjectPath
	values() []interface{}
}

// ErrUnknownSignal is returned by LookupSignal when a signal cannot be resolved.
var ErrUnknownSignal = errors.New("unknown signal")

// LookupSignal converts the given raw D-Bus signal with variable body
// into one with typed structured body or returns ErrUnknownSignal error.
func LookupSignal(signal *dbus.Signal) (Signal, error) {
	switch signal.Name {
	case InterfaceSocket + "." + "Available":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 dbus.ObjectPath
		})
		if !ok {
			return nil, fmt.Errorf("prop .Socket is %T, not struct {V0 string;V1 dbus.ObjectPath}", signal.Body[0])
		}
		return &SocketAvailableSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &SocketAvailableSignalBody{
				Socket: v0,
			},
		}, nil
	default:
		return nil, ErrUnknownSignal
	}
}

// AddMatchSignal registers a match rule for the given signal,
// opts are appended to the automatically generated signal's rules.
func AddMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.AddMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// RemoveMatchSignal unregisters the previously registered subscription.
func RemoveMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.RemoveMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// Interface name constants.
const (
	InterfaceSocket = "org.a11y.atspi.Socket"
)

// NewSocket creates and allocates org.a11y.atspi.Socket.
func NewSocket(object dbus.BusObject) *Socket {
	return &Socket{object}
}

// Socket implements org.a11y.atspi.Socket D-Bus interface.
type Socket struct {
	object dbus.BusObject
}

// Embed calls org.a11y.atspi.Socket.Embed method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiObjectReference
//   @org.qtproject.QtDBus.QtTypeName.Out0 = QSpiObjectReference
func (o *Socket) Embed(ctx context.Context, plug struct {
	V0 string
	V1 dbus.ObjectPath
}) (socket struct {
	V0 string
	V1 dbus.ObjectPath
}, err error) {
	err = o.object.CallWithContext(ctx, InterfaceSocket+".Embed", 0, plug).Store(&socket)
	return
}

// Unembed calls org.a11y.atspi.Socket.Unembed method.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiObjectReference
func (o *Socket) Unembed(ctx context.Context, plug struct {
	V0 string
	V1 dbus.ObjectPath
}) (err error) {
	err = o.object.CallWithContext(ctx, InterfaceSocket+".Unembed", 0, plug).Store()
	return
}

// SocketAvailableSignal represents org.a11y.atspi.Socket.Available signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiObjectReference
type SocketAvailableSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *SocketAvailableSignalBody
}

// Name returns the signal's name.
func (s *SocketAvailableSignal) Name() string {
	return "Available"
}

// Interface returns the signal's interface.
func (s *SocketAvailableSignal) Interface() string {
	return InterfaceSocket
}

// Sender returns the signal's sender unique name.
func (s *SocketAvailableSignal) Sender() string {
	return s.sender
}

func (s *SocketAvailableSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *SocketAvailableSignal) values() []interface{} {
	return []interface{}{s.Body.Socket}
}

// SocketAvailableSignalBody is body container.
type SocketAvailableSignalBody struct {
	Socket struct {
		V0 string
		V1 dbus.ObjectPath
	}
}
