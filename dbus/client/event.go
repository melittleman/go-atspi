// Code generated by dbus-codegen-go DO NOT EDIT.
package client

import (
	"context"
	"errors"
	"fmt"
	"github.com/godbus/dbus/v5"
)

// Signal is a common interface for all signals.
type Signal interface {
	Name() string
	Interface() string
	Sender() string

	path() dbus.ObjectPath
	values() []interface{}
}

// ErrUnknownSignal is returned by LookupSignal when a signal cannot be resolved.
var ErrUnknownSignal = errors.New("unknown signal")

// LookupSignal converts the given raw D-Bus signal with variable body
// into one with typed structured body or returns ErrUnknownSignal error.
func LookupSignal(signal *dbus.Signal) (Signal, error) {
	switch signal.Name {
	case InterfaceEventObject + "." + "PropertyChange":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectPropertyChangeSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectPropertyChangeSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "BoundsChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectBoundsChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectBoundsChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "LinkSelected":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectLinkSelectedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectLinkSelectedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "StateChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectStateChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectStateChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "ChildrenChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectChildrenChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectChildrenChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "VisibleDataChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectVisibleDataChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectVisibleDataChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "SelectionChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectSelectionChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectSelectionChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "ModelChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectModelChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectModelChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "ActiveDescendantChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectActiveDescendantChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectActiveDescendantChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "RowInserted":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectRowInsertedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectRowInsertedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "RowReordered":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectRowReorderedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectRowReorderedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "RowDeleted":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectRowDeletedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectRowDeletedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "ColumnInserted":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectColumnInsertedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectColumnInsertedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "ColumnReordered":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectColumnReorderedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectColumnReorderedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "ColumnDeleted":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectColumnDeletedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectColumnDeletedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "TextBoundsChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectTextBoundsChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectTextBoundsChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "TextSelectionChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectTextSelectionChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectTextSelectionChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "TextChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectTextChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectTextChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "TextAttributesChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectTextAttributesChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectTextAttributesChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "TextCaretMoved":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectTextCaretMovedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectTextCaretMovedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventObject + "." + "AttributesChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventObjectAttributesChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventObjectAttributesChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "PropertyChange":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowPropertyChangeSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowPropertyChangeSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Minimize":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowMinimizeSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowMinimizeSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Maximize":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowMaximizeSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowMaximizeSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Restore":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowRestoreSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowRestoreSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Close":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowCloseSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowCloseSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Create":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowCreateSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowCreateSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Reparent":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowReparentSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowReparentSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "DesktopCreate":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowDesktopCreateSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowDesktopCreateSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "DesktopDestroy":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowDesktopDestroySignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowDesktopDestroySignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Destroy":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowDestroySignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowDestroySignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Activate":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowActivateSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowActivateSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Deactivate":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowDeactivateSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowDeactivateSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Raise":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowRaiseSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowRaiseSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Lower":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowLowerSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowLowerSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Move":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowMoveSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowMoveSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Resize":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowResizeSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowResizeSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Shade":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowShadeSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowShadeSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "uUshade":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowUUshadeSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowUUshadeSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventWindow + "." + "Restyle":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventWindowRestyleSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventWindowRestyleSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventMouse + "." + "Abs":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventMouseAbsSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventMouseAbsSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventMouse + "." + "Rel":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventMouseRelSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventMouseRelSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventMouse + "." + "Button":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventMouseButtonSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventMouseButtonSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventKeyboard + "." + "Modifiers":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventKeyboardModifiersSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventKeyboardModifiersSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventTerminal + "." + "LineChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventTerminalLineChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventTerminalLineChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventTerminal + "." + "ColumncountChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventTerminalColumncountChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventTerminalColumncountChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventTerminal + "." + "LinecountChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventTerminalLinecountChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventTerminalLinecountChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventTerminal + "." + "ApplicationChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventTerminalApplicationChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventTerminalApplicationChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventTerminal + "." + "CharwidthChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventTerminalCharwidthChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventTerminalCharwidthChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventDocument + "." + "LoadComplete":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventDocumentLoadCompleteSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventDocumentLoadCompleteSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventDocument + "." + "Reload":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventDocumentReloadSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventDocumentReloadSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventDocument + "." + "LoadStopped":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventDocumentLoadStoppedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventDocumentLoadStoppedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventDocument + "." + "ContentChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventDocumentContentChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventDocumentContentChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventDocument + "." + "AttributesChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventDocumentAttributesChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventDocumentAttributesChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventDocument + "." + "PageChanged":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventDocumentPageChangedSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventDocumentPageChangedSignalBody{
				V0: v0,
			},
		}, nil
	case InterfaceEventFocus + "." + "Focus":
		v0, ok := signal.Body[0].(struct {
			V0 string
			V1 uint32
			V2 uint32
			V3 dbus.Variant
		})
		if !ok {
			return nil, fmt.Errorf("prop .V0 is %T, not struct {V0 string;V1 uint32;V2 uint32;V3 dbus.Variant}", signal.Body[0])
		}
		return &EventFocusFocusSignal{
			sender: signal.Sender,
			Path:   signal.Path,
			Body: &EventFocusFocusSignalBody{
				V0: v0,
			},
		}, nil
	default:
		return nil, ErrUnknownSignal
	}
}

// AddMatchSignal registers a match rule for the given signal,
// opts are appended to the automatically generated signal's rules.
func AddMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.AddMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// RemoveMatchSignal unregisters the previously registered subscription.
func RemoveMatchSignal(conn *dbus.Conn, s Signal, opts ...dbus.MatchOption) error {
	return conn.RemoveMatchSignal(append([]dbus.MatchOption{
		dbus.WithMatchInterface(s.Interface()),
		dbus.WithMatchMember(s.Name()),
	}, opts...)...)
}

// Interface name constants.
const (
	InterfaceEventObject   = "org.a11y.atspi.Event.Object"
	InterfaceEventWindow   = "org.a11y.atspi.Event.Window"
	InterfaceEventMouse    = "org.a11y.atspi.Event.Mouse"
	InterfaceEventKeyboard = "org.a11y.atspi.Event.Keyboard"
	InterfaceEventTerminal = "org.a11y.atspi.Event.Terminal"
	InterfaceEventDocument = "org.a11y.atspi.Event.Document"
	InterfaceEventFocus    = "org.a11y.atspi.Event.Focus"
)

// NewEventObject creates and allocates org.a11y.atspi.Event.Object.
func NewEventObject(object dbus.BusObject) *EventObject {
	return &EventObject{object}
}

// EventObject implements org.a11y.atspi.Event.Object D-Bus interface.
type EventObject struct {
	object dbus.BusObject
}

// EventObjectPropertyChangeSignal represents org.a11y.atspi.Event.Object.PropertyChange signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectPropertyChangeSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectPropertyChangeSignalBody
}

// Name returns the signal's name.
func (s *EventObjectPropertyChangeSignal) Name() string {
	return "PropertyChange"
}

// Interface returns the signal's interface.
func (s *EventObjectPropertyChangeSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectPropertyChangeSignal) Sender() string {
	return s.sender
}

func (s *EventObjectPropertyChangeSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectPropertyChangeSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectPropertyChangeSignalBody is body container.
type EventObjectPropertyChangeSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectBoundsChangedSignal represents org.a11y.atspi.Event.Object.BoundsChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectBoundsChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectBoundsChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectBoundsChangedSignal) Name() string {
	return "BoundsChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectBoundsChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectBoundsChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectBoundsChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectBoundsChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectBoundsChangedSignalBody is body container.
type EventObjectBoundsChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectLinkSelectedSignal represents org.a11y.atspi.Event.Object.LinkSelected signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectLinkSelectedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectLinkSelectedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectLinkSelectedSignal) Name() string {
	return "LinkSelected"
}

// Interface returns the signal's interface.
func (s *EventObjectLinkSelectedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectLinkSelectedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectLinkSelectedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectLinkSelectedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectLinkSelectedSignalBody is body container.
type EventObjectLinkSelectedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectStateChangedSignal represents org.a11y.atspi.Event.Object.StateChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectStateChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectStateChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectStateChangedSignal) Name() string {
	return "StateChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectStateChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectStateChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectStateChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectStateChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectStateChangedSignalBody is body container.
type EventObjectStateChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectChildrenChangedSignal represents org.a11y.atspi.Event.Object.ChildrenChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectChildrenChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectChildrenChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectChildrenChangedSignal) Name() string {
	return "ChildrenChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectChildrenChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectChildrenChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectChildrenChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectChildrenChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectChildrenChangedSignalBody is body container.
type EventObjectChildrenChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectVisibleDataChangedSignal represents org.a11y.atspi.Event.Object.VisibleDataChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectVisibleDataChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectVisibleDataChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectVisibleDataChangedSignal) Name() string {
	return "VisibleDataChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectVisibleDataChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectVisibleDataChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectVisibleDataChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectVisibleDataChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectVisibleDataChangedSignalBody is body container.
type EventObjectVisibleDataChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectSelectionChangedSignal represents org.a11y.atspi.Event.Object.SelectionChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectSelectionChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectSelectionChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectSelectionChangedSignal) Name() string {
	return "SelectionChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectSelectionChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectSelectionChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectSelectionChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectSelectionChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectSelectionChangedSignalBody is body container.
type EventObjectSelectionChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectModelChangedSignal represents org.a11y.atspi.Event.Object.ModelChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectModelChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectModelChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectModelChangedSignal) Name() string {
	return "ModelChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectModelChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectModelChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectModelChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectModelChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectModelChangedSignalBody is body container.
type EventObjectModelChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectActiveDescendantChangedSignal represents org.a11y.atspi.Event.Object.ActiveDescendantChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectActiveDescendantChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectActiveDescendantChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectActiveDescendantChangedSignal) Name() string {
	return "ActiveDescendantChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectActiveDescendantChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectActiveDescendantChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectActiveDescendantChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectActiveDescendantChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectActiveDescendantChangedSignalBody is body container.
type EventObjectActiveDescendantChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectRowInsertedSignal represents org.a11y.atspi.Event.Object.RowInserted signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectRowInsertedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectRowInsertedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectRowInsertedSignal) Name() string {
	return "RowInserted"
}

// Interface returns the signal's interface.
func (s *EventObjectRowInsertedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectRowInsertedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectRowInsertedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectRowInsertedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectRowInsertedSignalBody is body container.
type EventObjectRowInsertedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectRowReorderedSignal represents org.a11y.atspi.Event.Object.RowReordered signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectRowReorderedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectRowReorderedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectRowReorderedSignal) Name() string {
	return "RowReordered"
}

// Interface returns the signal's interface.
func (s *EventObjectRowReorderedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectRowReorderedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectRowReorderedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectRowReorderedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectRowReorderedSignalBody is body container.
type EventObjectRowReorderedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectRowDeletedSignal represents org.a11y.atspi.Event.Object.RowDeleted signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectRowDeletedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectRowDeletedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectRowDeletedSignal) Name() string {
	return "RowDeleted"
}

// Interface returns the signal's interface.
func (s *EventObjectRowDeletedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectRowDeletedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectRowDeletedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectRowDeletedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectRowDeletedSignalBody is body container.
type EventObjectRowDeletedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectColumnInsertedSignal represents org.a11y.atspi.Event.Object.ColumnInserted signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectColumnInsertedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectColumnInsertedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectColumnInsertedSignal) Name() string {
	return "ColumnInserted"
}

// Interface returns the signal's interface.
func (s *EventObjectColumnInsertedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectColumnInsertedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectColumnInsertedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectColumnInsertedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectColumnInsertedSignalBody is body container.
type EventObjectColumnInsertedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectColumnReorderedSignal represents org.a11y.atspi.Event.Object.ColumnReordered signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectColumnReorderedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectColumnReorderedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectColumnReorderedSignal) Name() string {
	return "ColumnReordered"
}

// Interface returns the signal's interface.
func (s *EventObjectColumnReorderedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectColumnReorderedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectColumnReorderedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectColumnReorderedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectColumnReorderedSignalBody is body container.
type EventObjectColumnReorderedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectColumnDeletedSignal represents org.a11y.atspi.Event.Object.ColumnDeleted signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectColumnDeletedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectColumnDeletedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectColumnDeletedSignal) Name() string {
	return "ColumnDeleted"
}

// Interface returns the signal's interface.
func (s *EventObjectColumnDeletedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectColumnDeletedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectColumnDeletedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectColumnDeletedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectColumnDeletedSignalBody is body container.
type EventObjectColumnDeletedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectTextBoundsChangedSignal represents org.a11y.atspi.Event.Object.TextBoundsChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectTextBoundsChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectTextBoundsChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectTextBoundsChangedSignal) Name() string {
	return "TextBoundsChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectTextBoundsChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectTextBoundsChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectTextBoundsChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectTextBoundsChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectTextBoundsChangedSignalBody is body container.
type EventObjectTextBoundsChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectTextSelectionChangedSignal represents org.a11y.atspi.Event.Object.TextSelectionChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectTextSelectionChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectTextSelectionChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectTextSelectionChangedSignal) Name() string {
	return "TextSelectionChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectTextSelectionChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectTextSelectionChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectTextSelectionChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectTextSelectionChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectTextSelectionChangedSignalBody is body container.
type EventObjectTextSelectionChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectTextChangedSignal represents org.a11y.atspi.Event.Object.TextChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectTextChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectTextChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectTextChangedSignal) Name() string {
	return "TextChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectTextChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectTextChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectTextChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectTextChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectTextChangedSignalBody is body container.
type EventObjectTextChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectTextAttributesChangedSignal represents org.a11y.atspi.Event.Object.TextAttributesChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectTextAttributesChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectTextAttributesChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectTextAttributesChangedSignal) Name() string {
	return "TextAttributesChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectTextAttributesChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectTextAttributesChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectTextAttributesChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectTextAttributesChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectTextAttributesChangedSignalBody is body container.
type EventObjectTextAttributesChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectTextCaretMovedSignal represents org.a11y.atspi.Event.Object.TextCaretMoved signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectTextCaretMovedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectTextCaretMovedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectTextCaretMovedSignal) Name() string {
	return "TextCaretMoved"
}

// Interface returns the signal's interface.
func (s *EventObjectTextCaretMovedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectTextCaretMovedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectTextCaretMovedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectTextCaretMovedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectTextCaretMovedSignalBody is body container.
type EventObjectTextCaretMovedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventObjectAttributesChangedSignal represents org.a11y.atspi.Event.Object.AttributesChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventObjectAttributesChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventObjectAttributesChangedSignalBody
}

// Name returns the signal's name.
func (s *EventObjectAttributesChangedSignal) Name() string {
	return "AttributesChanged"
}

// Interface returns the signal's interface.
func (s *EventObjectAttributesChangedSignal) Interface() string {
	return InterfaceEventObject
}

// Sender returns the signal's sender unique name.
func (s *EventObjectAttributesChangedSignal) Sender() string {
	return s.sender
}

func (s *EventObjectAttributesChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventObjectAttributesChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventObjectAttributesChangedSignalBody is body container.
type EventObjectAttributesChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// NewEventWindow creates and allocates org.a11y.atspi.Event.Window.
func NewEventWindow(object dbus.BusObject) *EventWindow {
	return &EventWindow{object}
}

// EventWindow implements org.a11y.atspi.Event.Window D-Bus interface.
type EventWindow struct {
	object dbus.BusObject
}

// EventWindowPropertyChangeSignal represents org.a11y.atspi.Event.Window.PropertyChange signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowPropertyChangeSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowPropertyChangeSignalBody
}

// Name returns the signal's name.
func (s *EventWindowPropertyChangeSignal) Name() string {
	return "PropertyChange"
}

// Interface returns the signal's interface.
func (s *EventWindowPropertyChangeSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowPropertyChangeSignal) Sender() string {
	return s.sender
}

func (s *EventWindowPropertyChangeSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowPropertyChangeSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowPropertyChangeSignalBody is body container.
type EventWindowPropertyChangeSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowMinimizeSignal represents org.a11y.atspi.Event.Window.Minimize signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowMinimizeSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowMinimizeSignalBody
}

// Name returns the signal's name.
func (s *EventWindowMinimizeSignal) Name() string {
	return "Minimize"
}

// Interface returns the signal's interface.
func (s *EventWindowMinimizeSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowMinimizeSignal) Sender() string {
	return s.sender
}

func (s *EventWindowMinimizeSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowMinimizeSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowMinimizeSignalBody is body container.
type EventWindowMinimizeSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowMaximizeSignal represents org.a11y.atspi.Event.Window.Maximize signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowMaximizeSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowMaximizeSignalBody
}

// Name returns the signal's name.
func (s *EventWindowMaximizeSignal) Name() string {
	return "Maximize"
}

// Interface returns the signal's interface.
func (s *EventWindowMaximizeSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowMaximizeSignal) Sender() string {
	return s.sender
}

func (s *EventWindowMaximizeSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowMaximizeSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowMaximizeSignalBody is body container.
type EventWindowMaximizeSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowRestoreSignal represents org.a11y.atspi.Event.Window.Restore signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowRestoreSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowRestoreSignalBody
}

// Name returns the signal's name.
func (s *EventWindowRestoreSignal) Name() string {
	return "Restore"
}

// Interface returns the signal's interface.
func (s *EventWindowRestoreSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowRestoreSignal) Sender() string {
	return s.sender
}

func (s *EventWindowRestoreSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowRestoreSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowRestoreSignalBody is body container.
type EventWindowRestoreSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowCloseSignal represents org.a11y.atspi.Event.Window.Close signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowCloseSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowCloseSignalBody
}

// Name returns the signal's name.
func (s *EventWindowCloseSignal) Name() string {
	return "Close"
}

// Interface returns the signal's interface.
func (s *EventWindowCloseSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowCloseSignal) Sender() string {
	return s.sender
}

func (s *EventWindowCloseSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowCloseSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowCloseSignalBody is body container.
type EventWindowCloseSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowCreateSignal represents org.a11y.atspi.Event.Window.Create signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowCreateSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowCreateSignalBody
}

// Name returns the signal's name.
func (s *EventWindowCreateSignal) Name() string {
	return "Create"
}

// Interface returns the signal's interface.
func (s *EventWindowCreateSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowCreateSignal) Sender() string {
	return s.sender
}

func (s *EventWindowCreateSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowCreateSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowCreateSignalBody is body container.
type EventWindowCreateSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowReparentSignal represents org.a11y.atspi.Event.Window.Reparent signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowReparentSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowReparentSignalBody
}

// Name returns the signal's name.
func (s *EventWindowReparentSignal) Name() string {
	return "Reparent"
}

// Interface returns the signal's interface.
func (s *EventWindowReparentSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowReparentSignal) Sender() string {
	return s.sender
}

func (s *EventWindowReparentSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowReparentSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowReparentSignalBody is body container.
type EventWindowReparentSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowDesktopCreateSignal represents org.a11y.atspi.Event.Window.DesktopCreate signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowDesktopCreateSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowDesktopCreateSignalBody
}

// Name returns the signal's name.
func (s *EventWindowDesktopCreateSignal) Name() string {
	return "DesktopCreate"
}

// Interface returns the signal's interface.
func (s *EventWindowDesktopCreateSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowDesktopCreateSignal) Sender() string {
	return s.sender
}

func (s *EventWindowDesktopCreateSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowDesktopCreateSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowDesktopCreateSignalBody is body container.
type EventWindowDesktopCreateSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowDesktopDestroySignal represents org.a11y.atspi.Event.Window.DesktopDestroy signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowDesktopDestroySignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowDesktopDestroySignalBody
}

// Name returns the signal's name.
func (s *EventWindowDesktopDestroySignal) Name() string {
	return "DesktopDestroy"
}

// Interface returns the signal's interface.
func (s *EventWindowDesktopDestroySignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowDesktopDestroySignal) Sender() string {
	return s.sender
}

func (s *EventWindowDesktopDestroySignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowDesktopDestroySignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowDesktopDestroySignalBody is body container.
type EventWindowDesktopDestroySignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowDestroySignal represents org.a11y.atspi.Event.Window.Destroy signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowDestroySignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowDestroySignalBody
}

// Name returns the signal's name.
func (s *EventWindowDestroySignal) Name() string {
	return "Destroy"
}

// Interface returns the signal's interface.
func (s *EventWindowDestroySignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowDestroySignal) Sender() string {
	return s.sender
}

func (s *EventWindowDestroySignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowDestroySignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowDestroySignalBody is body container.
type EventWindowDestroySignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowActivateSignal represents org.a11y.atspi.Event.Window.Activate signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowActivateSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowActivateSignalBody
}

// Name returns the signal's name.
func (s *EventWindowActivateSignal) Name() string {
	return "Activate"
}

// Interface returns the signal's interface.
func (s *EventWindowActivateSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowActivateSignal) Sender() string {
	return s.sender
}

func (s *EventWindowActivateSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowActivateSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowActivateSignalBody is body container.
type EventWindowActivateSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowDeactivateSignal represents org.a11y.atspi.Event.Window.Deactivate signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowDeactivateSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowDeactivateSignalBody
}

// Name returns the signal's name.
func (s *EventWindowDeactivateSignal) Name() string {
	return "Deactivate"
}

// Interface returns the signal's interface.
func (s *EventWindowDeactivateSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowDeactivateSignal) Sender() string {
	return s.sender
}

func (s *EventWindowDeactivateSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowDeactivateSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowDeactivateSignalBody is body container.
type EventWindowDeactivateSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowRaiseSignal represents org.a11y.atspi.Event.Window.Raise signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowRaiseSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowRaiseSignalBody
}

// Name returns the signal's name.
func (s *EventWindowRaiseSignal) Name() string {
	return "Raise"
}

// Interface returns the signal's interface.
func (s *EventWindowRaiseSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowRaiseSignal) Sender() string {
	return s.sender
}

func (s *EventWindowRaiseSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowRaiseSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowRaiseSignalBody is body container.
type EventWindowRaiseSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowLowerSignal represents org.a11y.atspi.Event.Window.Lower signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowLowerSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowLowerSignalBody
}

// Name returns the signal's name.
func (s *EventWindowLowerSignal) Name() string {
	return "Lower"
}

// Interface returns the signal's interface.
func (s *EventWindowLowerSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowLowerSignal) Sender() string {
	return s.sender
}

func (s *EventWindowLowerSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowLowerSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowLowerSignalBody is body container.
type EventWindowLowerSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowMoveSignal represents org.a11y.atspi.Event.Window.Move signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowMoveSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowMoveSignalBody
}

// Name returns the signal's name.
func (s *EventWindowMoveSignal) Name() string {
	return "Move"
}

// Interface returns the signal's interface.
func (s *EventWindowMoveSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowMoveSignal) Sender() string {
	return s.sender
}

func (s *EventWindowMoveSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowMoveSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowMoveSignalBody is body container.
type EventWindowMoveSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowResizeSignal represents org.a11y.atspi.Event.Window.Resize signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowResizeSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowResizeSignalBody
}

// Name returns the signal's name.
func (s *EventWindowResizeSignal) Name() string {
	return "Resize"
}

// Interface returns the signal's interface.
func (s *EventWindowResizeSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowResizeSignal) Sender() string {
	return s.sender
}

func (s *EventWindowResizeSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowResizeSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowResizeSignalBody is body container.
type EventWindowResizeSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowShadeSignal represents org.a11y.atspi.Event.Window.Shade signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowShadeSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowShadeSignalBody
}

// Name returns the signal's name.
func (s *EventWindowShadeSignal) Name() string {
	return "Shade"
}

// Interface returns the signal's interface.
func (s *EventWindowShadeSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowShadeSignal) Sender() string {
	return s.sender
}

func (s *EventWindowShadeSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowShadeSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowShadeSignalBody is body container.
type EventWindowShadeSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowUUshadeSignal represents org.a11y.atspi.Event.Window.uUshade signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowUUshadeSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowUUshadeSignalBody
}

// Name returns the signal's name.
func (s *EventWindowUUshadeSignal) Name() string {
	return "uUshade"
}

// Interface returns the signal's interface.
func (s *EventWindowUUshadeSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowUUshadeSignal) Sender() string {
	return s.sender
}

func (s *EventWindowUUshadeSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowUUshadeSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowUUshadeSignalBody is body container.
type EventWindowUUshadeSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventWindowRestyleSignal represents org.a11y.atspi.Event.Window.Restyle signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventWindowRestyleSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventWindowRestyleSignalBody
}

// Name returns the signal's name.
func (s *EventWindowRestyleSignal) Name() string {
	return "Restyle"
}

// Interface returns the signal's interface.
func (s *EventWindowRestyleSignal) Interface() string {
	return InterfaceEventWindow
}

// Sender returns the signal's sender unique name.
func (s *EventWindowRestyleSignal) Sender() string {
	return s.sender
}

func (s *EventWindowRestyleSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventWindowRestyleSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventWindowRestyleSignalBody is body container.
type EventWindowRestyleSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// NewEventMouse creates and allocates org.a11y.atspi.Event.Mouse.
func NewEventMouse(object dbus.BusObject) *EventMouse {
	return &EventMouse{object}
}

// EventMouse implements org.a11y.atspi.Event.Mouse D-Bus interface.
type EventMouse struct {
	object dbus.BusObject
}

// EventMouseAbsSignal represents org.a11y.atspi.Event.Mouse.Abs signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventMouseAbsSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventMouseAbsSignalBody
}

// Name returns the signal's name.
func (s *EventMouseAbsSignal) Name() string {
	return "Abs"
}

// Interface returns the signal's interface.
func (s *EventMouseAbsSignal) Interface() string {
	return InterfaceEventMouse
}

// Sender returns the signal's sender unique name.
func (s *EventMouseAbsSignal) Sender() string {
	return s.sender
}

func (s *EventMouseAbsSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventMouseAbsSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventMouseAbsSignalBody is body container.
type EventMouseAbsSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventMouseRelSignal represents org.a11y.atspi.Event.Mouse.Rel signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventMouseRelSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventMouseRelSignalBody
}

// Name returns the signal's name.
func (s *EventMouseRelSignal) Name() string {
	return "Rel"
}

// Interface returns the signal's interface.
func (s *EventMouseRelSignal) Interface() string {
	return InterfaceEventMouse
}

// Sender returns the signal's sender unique name.
func (s *EventMouseRelSignal) Sender() string {
	return s.sender
}

func (s *EventMouseRelSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventMouseRelSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventMouseRelSignalBody is body container.
type EventMouseRelSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventMouseButtonSignal represents org.a11y.atspi.Event.Mouse.Button signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventMouseButtonSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventMouseButtonSignalBody
}

// Name returns the signal's name.
func (s *EventMouseButtonSignal) Name() string {
	return "Button"
}

// Interface returns the signal's interface.
func (s *EventMouseButtonSignal) Interface() string {
	return InterfaceEventMouse
}

// Sender returns the signal's sender unique name.
func (s *EventMouseButtonSignal) Sender() string {
	return s.sender
}

func (s *EventMouseButtonSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventMouseButtonSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventMouseButtonSignalBody is body container.
type EventMouseButtonSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// NewEventKeyboard creates and allocates org.a11y.atspi.Event.Keyboard.
func NewEventKeyboard(object dbus.BusObject) *EventKeyboard {
	return &EventKeyboard{object}
}

// EventKeyboard implements org.a11y.atspi.Event.Keyboard D-Bus interface.
type EventKeyboard struct {
	object dbus.BusObject
}

// EventKeyboardModifiersSignal represents org.a11y.atspi.Event.Keyboard.Modifiers signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventKeyboardModifiersSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventKeyboardModifiersSignalBody
}

// Name returns the signal's name.
func (s *EventKeyboardModifiersSignal) Name() string {
	return "Modifiers"
}

// Interface returns the signal's interface.
func (s *EventKeyboardModifiersSignal) Interface() string {
	return InterfaceEventKeyboard
}

// Sender returns the signal's sender unique name.
func (s *EventKeyboardModifiersSignal) Sender() string {
	return s.sender
}

func (s *EventKeyboardModifiersSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventKeyboardModifiersSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventKeyboardModifiersSignalBody is body container.
type EventKeyboardModifiersSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// NewEventTerminal creates and allocates org.a11y.atspi.Event.Terminal.
func NewEventTerminal(object dbus.BusObject) *EventTerminal {
	return &EventTerminal{object}
}

// EventTerminal implements org.a11y.atspi.Event.Terminal D-Bus interface.
type EventTerminal struct {
	object dbus.BusObject
}

// EventTerminalLineChangedSignal represents org.a11y.atspi.Event.Terminal.LineChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventTerminalLineChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventTerminalLineChangedSignalBody
}

// Name returns the signal's name.
func (s *EventTerminalLineChangedSignal) Name() string {
	return "LineChanged"
}

// Interface returns the signal's interface.
func (s *EventTerminalLineChangedSignal) Interface() string {
	return InterfaceEventTerminal
}

// Sender returns the signal's sender unique name.
func (s *EventTerminalLineChangedSignal) Sender() string {
	return s.sender
}

func (s *EventTerminalLineChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventTerminalLineChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventTerminalLineChangedSignalBody is body container.
type EventTerminalLineChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventTerminalColumncountChangedSignal represents org.a11y.atspi.Event.Terminal.ColumncountChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventTerminalColumncountChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventTerminalColumncountChangedSignalBody
}

// Name returns the signal's name.
func (s *EventTerminalColumncountChangedSignal) Name() string {
	return "ColumncountChanged"
}

// Interface returns the signal's interface.
func (s *EventTerminalColumncountChangedSignal) Interface() string {
	return InterfaceEventTerminal
}

// Sender returns the signal's sender unique name.
func (s *EventTerminalColumncountChangedSignal) Sender() string {
	return s.sender
}

func (s *EventTerminalColumncountChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventTerminalColumncountChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventTerminalColumncountChangedSignalBody is body container.
type EventTerminalColumncountChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventTerminalLinecountChangedSignal represents org.a11y.atspi.Event.Terminal.LinecountChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventTerminalLinecountChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventTerminalLinecountChangedSignalBody
}

// Name returns the signal's name.
func (s *EventTerminalLinecountChangedSignal) Name() string {
	return "LinecountChanged"
}

// Interface returns the signal's interface.
func (s *EventTerminalLinecountChangedSignal) Interface() string {
	return InterfaceEventTerminal
}

// Sender returns the signal's sender unique name.
func (s *EventTerminalLinecountChangedSignal) Sender() string {
	return s.sender
}

func (s *EventTerminalLinecountChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventTerminalLinecountChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventTerminalLinecountChangedSignalBody is body container.
type EventTerminalLinecountChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventTerminalApplicationChangedSignal represents org.a11y.atspi.Event.Terminal.ApplicationChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventTerminalApplicationChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventTerminalApplicationChangedSignalBody
}

// Name returns the signal's name.
func (s *EventTerminalApplicationChangedSignal) Name() string {
	return "ApplicationChanged"
}

// Interface returns the signal's interface.
func (s *EventTerminalApplicationChangedSignal) Interface() string {
	return InterfaceEventTerminal
}

// Sender returns the signal's sender unique name.
func (s *EventTerminalApplicationChangedSignal) Sender() string {
	return s.sender
}

func (s *EventTerminalApplicationChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventTerminalApplicationChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventTerminalApplicationChangedSignalBody is body container.
type EventTerminalApplicationChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventTerminalCharwidthChangedSignal represents org.a11y.atspi.Event.Terminal.CharwidthChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventTerminalCharwidthChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventTerminalCharwidthChangedSignalBody
}

// Name returns the signal's name.
func (s *EventTerminalCharwidthChangedSignal) Name() string {
	return "CharwidthChanged"
}

// Interface returns the signal's interface.
func (s *EventTerminalCharwidthChangedSignal) Interface() string {
	return InterfaceEventTerminal
}

// Sender returns the signal's sender unique name.
func (s *EventTerminalCharwidthChangedSignal) Sender() string {
	return s.sender
}

func (s *EventTerminalCharwidthChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventTerminalCharwidthChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventTerminalCharwidthChangedSignalBody is body container.
type EventTerminalCharwidthChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// NewEventDocument creates and allocates org.a11y.atspi.Event.Document.
func NewEventDocument(object dbus.BusObject) *EventDocument {
	return &EventDocument{object}
}

// EventDocument implements org.a11y.atspi.Event.Document D-Bus interface.
type EventDocument struct {
	object dbus.BusObject
}

// EventDocumentLoadCompleteSignal represents org.a11y.atspi.Event.Document.LoadComplete signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventDocumentLoadCompleteSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventDocumentLoadCompleteSignalBody
}

// Name returns the signal's name.
func (s *EventDocumentLoadCompleteSignal) Name() string {
	return "LoadComplete"
}

// Interface returns the signal's interface.
func (s *EventDocumentLoadCompleteSignal) Interface() string {
	return InterfaceEventDocument
}

// Sender returns the signal's sender unique name.
func (s *EventDocumentLoadCompleteSignal) Sender() string {
	return s.sender
}

func (s *EventDocumentLoadCompleteSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventDocumentLoadCompleteSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventDocumentLoadCompleteSignalBody is body container.
type EventDocumentLoadCompleteSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventDocumentReloadSignal represents org.a11y.atspi.Event.Document.Reload signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventDocumentReloadSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventDocumentReloadSignalBody
}

// Name returns the signal's name.
func (s *EventDocumentReloadSignal) Name() string {
	return "Reload"
}

// Interface returns the signal's interface.
func (s *EventDocumentReloadSignal) Interface() string {
	return InterfaceEventDocument
}

// Sender returns the signal's sender unique name.
func (s *EventDocumentReloadSignal) Sender() string {
	return s.sender
}

func (s *EventDocumentReloadSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventDocumentReloadSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventDocumentReloadSignalBody is body container.
type EventDocumentReloadSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventDocumentLoadStoppedSignal represents org.a11y.atspi.Event.Document.LoadStopped signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventDocumentLoadStoppedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventDocumentLoadStoppedSignalBody
}

// Name returns the signal's name.
func (s *EventDocumentLoadStoppedSignal) Name() string {
	return "LoadStopped"
}

// Interface returns the signal's interface.
func (s *EventDocumentLoadStoppedSignal) Interface() string {
	return InterfaceEventDocument
}

// Sender returns the signal's sender unique name.
func (s *EventDocumentLoadStoppedSignal) Sender() string {
	return s.sender
}

func (s *EventDocumentLoadStoppedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventDocumentLoadStoppedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventDocumentLoadStoppedSignalBody is body container.
type EventDocumentLoadStoppedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventDocumentContentChangedSignal represents org.a11y.atspi.Event.Document.ContentChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventDocumentContentChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventDocumentContentChangedSignalBody
}

// Name returns the signal's name.
func (s *EventDocumentContentChangedSignal) Name() string {
	return "ContentChanged"
}

// Interface returns the signal's interface.
func (s *EventDocumentContentChangedSignal) Interface() string {
	return InterfaceEventDocument
}

// Sender returns the signal's sender unique name.
func (s *EventDocumentContentChangedSignal) Sender() string {
	return s.sender
}

func (s *EventDocumentContentChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventDocumentContentChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventDocumentContentChangedSignalBody is body container.
type EventDocumentContentChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventDocumentAttributesChangedSignal represents org.a11y.atspi.Event.Document.AttributesChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventDocumentAttributesChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventDocumentAttributesChangedSignalBody
}

// Name returns the signal's name.
func (s *EventDocumentAttributesChangedSignal) Name() string {
	return "AttributesChanged"
}

// Interface returns the signal's interface.
func (s *EventDocumentAttributesChangedSignal) Interface() string {
	return InterfaceEventDocument
}

// Sender returns the signal's sender unique name.
func (s *EventDocumentAttributesChangedSignal) Sender() string {
	return s.sender
}

func (s *EventDocumentAttributesChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventDocumentAttributesChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventDocumentAttributesChangedSignalBody is body container.
type EventDocumentAttributesChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// EventDocumentPageChangedSignal represents org.a11y.atspi.Event.Document.PageChanged signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventDocumentPageChangedSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventDocumentPageChangedSignalBody
}

// Name returns the signal's name.
func (s *EventDocumentPageChangedSignal) Name() string {
	return "PageChanged"
}

// Interface returns the signal's interface.
func (s *EventDocumentPageChangedSignal) Interface() string {
	return InterfaceEventDocument
}

// Sender returns the signal's sender unique name.
func (s *EventDocumentPageChangedSignal) Sender() string {
	return s.sender
}

func (s *EventDocumentPageChangedSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventDocumentPageChangedSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventDocumentPageChangedSignalBody is body container.
type EventDocumentPageChangedSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}

// NewEventFocus creates and allocates org.a11y.atspi.Event.Focus.
func NewEventFocus(object dbus.BusObject) *EventFocus {
	return &EventFocus{object}
}

// EventFocus implements org.a11y.atspi.Event.Focus D-Bus interface.
type EventFocus struct {
	object dbus.BusObject
}

// EventFocusFocusSignal represents org.a11y.atspi.Event.Focus.Focus signal.
//
// Annotations:
//   @org.qtproject.QtDBus.QtTypeName.In0 = QSpiEvent
type EventFocusFocusSignal struct {
	sender string
	Path   dbus.ObjectPath
	Body   *EventFocusFocusSignalBody
}

// Name returns the signal's name.
func (s *EventFocusFocusSignal) Name() string {
	return "Focus"
}

// Interface returns the signal's interface.
func (s *EventFocusFocusSignal) Interface() string {
	return InterfaceEventFocus
}

// Sender returns the signal's sender unique name.
func (s *EventFocusFocusSignal) Sender() string {
	return s.sender
}

func (s *EventFocusFocusSignal) path() dbus.ObjectPath {
	return s.Path
}

func (s *EventFocusFocusSignal) values() []interface{} {
	return []interface{}{s.Body.V0}
}

// EventFocusFocusSignalBody is body container.
type EventFocusFocusSignalBody struct {
	V0 struct {
		V0 string
		V1 uint32
		V2 uint32
		V3 dbus.Variant
	}
}
