// Code generated by dbus-codegen-go DO NOT EDIT.
package server

import (
	"github.com/godbus/dbus/v5"
)

// Signal is a common interface for all signals.
type Signal interface {
	Name() string
	Interface() string
	Sender() string

	path() dbus.ObjectPath
	values() []interface{}
}

// Emit sends the given signal to the bus.
func Emit(conn *dbus.Conn, s Signal) error {
	return conn.Emit(s.path(), s.Interface()+"."+s.Name(), s.values()...)
}

// Interface name constants.
const (
	InterfaceEventObject   = "org.a11y.atspi.Event.Object"
	InterfaceEventWindow   = "org.a11y.atspi.Event.Window"
	InterfaceEventMouse    = "org.a11y.atspi.Event.Mouse"
	InterfaceEventKeyboard = "org.a11y.atspi.Event.Keyboard"
	InterfaceEventTerminal = "org.a11y.atspi.Event.Terminal"
	InterfaceEventDocument = "org.a11y.atspi.Event.Document"
	InterfaceEventFocus    = "org.a11y.atspi.Event.Focus"
)

// EventObjecter is org.a11y.atspi.Event.Object interface.
type EventObjecter interface {
}

// ExportEventObject exports the given object that implements org.a11y.atspi.Event.Object on the bus.
func ExportEventObject(conn *dbus.Conn, path dbus.ObjectPath, v EventObjecter) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{}, path, InterfaceEventObject)
}

// UnexportEventObject unexports org.a11y.atspi.Event.Object interface on the named path.
func UnexportEventObject(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceEventObject)
}

// UnimplementedEventObject can be embedded to have forward compatible server implementations.
type UnimplementedEventObject struct{}

func (*UnimplementedEventObject) iface() string {
	return InterfaceEventObject
}

// EventWindower is org.a11y.atspi.Event.Window interface.
type EventWindower interface {
}

// ExportEventWindow exports the given object that implements org.a11y.atspi.Event.Window on the bus.
func ExportEventWindow(conn *dbus.Conn, path dbus.ObjectPath, v EventWindower) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{}, path, InterfaceEventWindow)
}

// UnexportEventWindow unexports org.a11y.atspi.Event.Window interface on the named path.
func UnexportEventWindow(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceEventWindow)
}

// UnimplementedEventWindow can be embedded to have forward compatible server implementations.
type UnimplementedEventWindow struct{}

func (*UnimplementedEventWindow) iface() string {
	return InterfaceEventWindow
}

// EventMouseer is org.a11y.atspi.Event.Mouse interface.
type EventMouseer interface {
}

// ExportEventMouse exports the given object that implements org.a11y.atspi.Event.Mouse on the bus.
func ExportEventMouse(conn *dbus.Conn, path dbus.ObjectPath, v EventMouseer) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{}, path, InterfaceEventMouse)
}

// UnexportEventMouse unexports org.a11y.atspi.Event.Mouse interface on the named path.
func UnexportEventMouse(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceEventMouse)
}

// UnimplementedEventMouse can be embedded to have forward compatible server implementations.
type UnimplementedEventMouse struct{}

func (*UnimplementedEventMouse) iface() string {
	return InterfaceEventMouse
}

// EventKeyboarder is org.a11y.atspi.Event.Keyboard interface.
type EventKeyboarder interface {
}

// ExportEventKeyboard exports the given object that implements org.a11y.atspi.Event.Keyboard on the bus.
func ExportEventKeyboard(conn *dbus.Conn, path dbus.ObjectPath, v EventKeyboarder) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{}, path, InterfaceEventKeyboard)
}

// UnexportEventKeyboard unexports org.a11y.atspi.Event.Keyboard interface on the named path.
func UnexportEventKeyboard(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceEventKeyboard)
}

// UnimplementedEventKeyboard can be embedded to have forward compatible server implementations.
type UnimplementedEventKeyboard struct{}

func (*UnimplementedEventKeyboard) iface() string {
	return InterfaceEventKeyboard
}

// EventTerminaler is org.a11y.atspi.Event.Terminal interface.
type EventTerminaler interface {
}

// ExportEventTerminal exports the given object that implements org.a11y.atspi.Event.Terminal on the bus.
func ExportEventTerminal(conn *dbus.Conn, path dbus.ObjectPath, v EventTerminaler) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{}, path, InterfaceEventTerminal)
}

// UnexportEventTerminal unexports org.a11y.atspi.Event.Terminal interface on the named path.
func UnexportEventTerminal(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceEventTerminal)
}

// UnimplementedEventTerminal can be embedded to have forward compatible server implementations.
type UnimplementedEventTerminal struct{}

func (*UnimplementedEventTerminal) iface() string {
	return InterfaceEventTerminal
}

// EventDocumenter is org.a11y.atspi.Event.Document interface.
type EventDocumenter interface {
}

// ExportEventDocument exports the given object that implements org.a11y.atspi.Event.Document on the bus.
func ExportEventDocument(conn *dbus.Conn, path dbus.ObjectPath, v EventDocumenter) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{}, path, InterfaceEventDocument)
}

// UnexportEventDocument unexports org.a11y.atspi.Event.Document interface on the named path.
func UnexportEventDocument(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceEventDocument)
}

// UnimplementedEventDocument can be embedded to have forward compatible server implementations.
type UnimplementedEventDocument struct{}

func (*UnimplementedEventDocument) iface() string {
	return InterfaceEventDocument
}

// EventFocuser is org.a11y.atspi.Event.Focus interface.
type EventFocuser interface {
}

// ExportEventFocus exports the given object that implements org.a11y.atspi.Event.Focus on the bus.
func ExportEventFocus(conn *dbus.Conn, path dbus.ObjectPath, v EventFocuser) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{}, path, InterfaceEventFocus)
}

// UnexportEventFocus unexports org.a11y.atspi.Event.Focus interface on the named path.
func UnexportEventFocus(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceEventFocus)
}

// UnimplementedEventFocus can be embedded to have forward compatible server implementations.
type UnimplementedEventFocus struct{}

func (*UnimplementedEventFocus) iface() string {
	return InterfaceEventFocus
}
