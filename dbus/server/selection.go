// Code generated by dbus-codegen-go DO NOT EDIT.
package server

import (
	"github.com/godbus/dbus/v5"
)

// Interface name constants.
const (
	InterfaceSelection = "org.a11y.atspi.Selection"
)

// Selectioner is org.a11y.atspi.Selection interface.
type Selectioner interface {
	// GetSelectedChild is org.a11y.atspi.Selection.GetSelectedChild method.
	GetSelectedChild(selectedChildIndex int32) (out0 struct {
		V0 string
		V1 dbus.ObjectPath
	}, err *dbus.Error)
	// SelectChild is org.a11y.atspi.Selection.SelectChild method.
	SelectChild(childIndex int32) (out0 bool, err *dbus.Error)
	// DeselectSelectedChild is org.a11y.atspi.Selection.DeselectSelectedChild method.
	DeselectSelectedChild(selectedChildIndex int32) (out0 bool, err *dbus.Error)
	// IsChildSelected is org.a11y.atspi.Selection.IsChildSelected method.
	IsChildSelected(childIndex int32) (out0 bool, err *dbus.Error)
	// SelectAll is org.a11y.atspi.Selection.SelectAll method.
	SelectAll() (out0 bool, err *dbus.Error)
	// ClearSelection is org.a11y.atspi.Selection.ClearSelection method.
	ClearSelection() (out0 bool, err *dbus.Error)
	// DeselectChild is org.a11y.atspi.Selection.DeselectChild method.
	DeselectChild(childIndex int32) (out0 bool, err *dbus.Error)
}

// ExportSelection exports the given object that implements org.a11y.atspi.Selection on the bus.
func ExportSelection(conn *dbus.Conn, path dbus.ObjectPath, v Selectioner) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{
		"GetSelectedChild":      v.GetSelectedChild,
		"SelectChild":           v.SelectChild,
		"DeselectSelectedChild": v.DeselectSelectedChild,
		"IsChildSelected":       v.IsChildSelected,
		"SelectAll":             v.SelectAll,
		"ClearSelection":        v.ClearSelection,
		"DeselectChild":         v.DeselectChild,
	}, path, InterfaceSelection)
}

// UnexportSelection unexports org.a11y.atspi.Selection interface on the named path.
func UnexportSelection(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceSelection)
}

// UnimplementedSelection can be embedded to have forward compatible server implementations.
type UnimplementedSelection struct{}

func (*UnimplementedSelection) iface() string {
	return InterfaceSelection
}

func (*UnimplementedSelection) GetSelectedChild(selectedChildIndex int32) (out0 struct {
	V0 string
	V1 dbus.ObjectPath
}, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedSelection) SelectChild(childIndex int32) (out0 bool, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedSelection) DeselectSelectedChild(selectedChildIndex int32) (out0 bool, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedSelection) IsChildSelected(childIndex int32) (out0 bool, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedSelection) SelectAll() (out0 bool, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedSelection) ClearSelection() (out0 bool, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedSelection) DeselectChild(childIndex int32) (out0 bool, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}
