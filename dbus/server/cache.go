// Code generated by dbus-codegen-go DO NOT EDIT.
package server

import (
	"github.com/godbus/dbus/v5"
)

// Signal is a common interface for all signals.
type Signal interface {
	Name() string
	Interface() string
	Sender() string

	path() dbus.ObjectPath
	values() []interface{}
}

// Emit sends the given signal to the bus.
func Emit(conn *dbus.Conn, s Signal) error {
	return conn.Emit(s.path(), s.Interface()+"."+s.Name(), s.values()...)
}

// Interface name constants.
const (
	InterfaceCache = "org.a11y.atspi.Cache"
)

// Cacheer is org.a11y.atspi.Cache interface.
type Cacheer interface {
	// GetItems is org.a11y.atspi.Cache.GetItems method.
	GetItems() (nodes []struct {
		V0 struct {
			V0 string
			V1 dbus.ObjectPath
		}
		V1 struct {
			V0 string
			V1 dbus.ObjectPath
		}
		V2 struct {
			V0 string
			V1 dbus.ObjectPath
		}
		V3 int32
		V4 int32
		V5 []string
		V6 string
		V7 uint32
		V8 string
		V9 []uint32
	}, err *dbus.Error)
}

// ExportCache exports the given object that implements org.a11y.atspi.Cache on the bus.
func ExportCache(conn *dbus.Conn, path dbus.ObjectPath, v Cacheer) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{
		"GetItems": v.GetItems,
	}, path, InterfaceCache)
}

// UnexportCache unexports org.a11y.atspi.Cache interface on the named path.
func UnexportCache(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceCache)
}

// UnimplementedCache can be embedded to have forward compatible server implementations.
type UnimplementedCache struct{}

func (*UnimplementedCache) iface() string {
	return InterfaceCache
}

func (*UnimplementedCache) GetItems() (nodes []struct {
	V0 struct {
		V0 string
		V1 dbus.ObjectPath
	}
	V1 struct {
		V0 string
		V1 dbus.ObjectPath
	}
	V2 struct {
		V0 string
		V1 dbus.ObjectPath
	}
	V3 int32
	V4 int32
	V5 []string
	V6 string
	V7 uint32
	V8 string
	V9 []uint32
}, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}
