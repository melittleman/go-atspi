// Code generated by dbus-codegen-go DO NOT EDIT.
package server

import (
	"github.com/godbus/dbus/v5"
)

// Signal is a common interface for all signals.
type Signal interface {
	Name() string
	Interface() string
	Sender() string

	path() dbus.ObjectPath
	values() []interface{}
}

// Emit sends the given signal to the bus.
func Emit(conn *dbus.Conn, s Signal) error {
	return conn.Emit(s.path(), s.Interface()+"."+s.Name(), s.values()...)
}

// Interface name constants.
const (
	InterfaceSocket = "org.a11y.atspi.Socket"
)

// Socketer is org.a11y.atspi.Socket interface.
type Socketer interface {
	// Embed is org.a11y.atspi.Socket.Embed method.
	Embed(plug struct {
		V0 string
		V1 dbus.ObjectPath
	}) (socket struct {
		V0 string
		V1 dbus.ObjectPath
	}, err *dbus.Error)
	// Unembed is org.a11y.atspi.Socket.Unembed method.
	Unembed(plug struct {
		V0 string
		V1 dbus.ObjectPath
	}) (err *dbus.Error)
}

// ExportSocket exports the given object that implements org.a11y.atspi.Socket on the bus.
func ExportSocket(conn *dbus.Conn, path dbus.ObjectPath, v Socketer) error {
	return conn.ExportSubtreeMethodTable(map[string]interface{}{
		"Embed":   v.Embed,
		"Unembed": v.Unembed,
	}, path, InterfaceSocket)
}

// UnexportSocket unexports org.a11y.atspi.Socket interface on the named path.
func UnexportSocket(conn *dbus.Conn, path dbus.ObjectPath) error {
	return conn.Export(nil, path, InterfaceSocket)
}

// UnimplementedSocket can be embedded to have forward compatible server implementations.
type UnimplementedSocket struct{}

func (*UnimplementedSocket) iface() string {
	return InterfaceSocket
}

func (*UnimplementedSocket) Embed(plug struct {
	V0 string
	V1 dbus.ObjectPath
}) (socket struct {
	V0 string
	V1 dbus.ObjectPath
}, err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}

func (*UnimplementedSocket) Unembed(plug struct {
	V0 string
	V1 dbus.ObjectPath
}) (err *dbus.Error) {
	err = &dbus.ErrMsgUnknownMethod
	return
}
